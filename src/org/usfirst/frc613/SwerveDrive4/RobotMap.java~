// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc613.SwerveDrive4;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeft;
    public static SpeedController driveTrainRight;
    public static RobotDrive driveTrainDrive;
    public static SpeedController driveTrainLeftSpin;
    public static SpeedController driveTrainFakeWheel;
    public static RobotDrive driveTrainSwerve;
    public static SpeedController driveTrainRrightSpin;
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeft = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "Left", (Talon) driveTrainLeft);
        
        driveTrainRight = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "Right", (Talon) driveTrainRight);
        
        driveTrainDrive = new RobotDrive(driveTrainLeft, driveTrainRight);
        
        driveTrainDrive.setSafetyEnabled(true);
        driveTrainDrive.setExpiration(0.1);
        driveTrainDrive.setSensitivity(0.5);
        driveTrainDrive.setMaxOutput(1.0);
        

        driveTrainLeftSpin = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "LeftSpin", (Talon) driveTrainLeftSpin);
        
        driveTrainFakeWheel = new Talon(4);
        LiveWindow.addActuator("DriveTrain", "FakeWheel", (Talon) driveTrainFakeWheel);
        
        driveTrainSwerve = new RobotDrive(driveTrainLeftSpin, driveTrainFakeWheel);
        
        driveTrainSwerve.setSafetyEnabled(true);
        driveTrainSwerve.setExpiration(0.1);
        driveTrainSwerve.setSensitivity(0.5);
        driveTrainSwerve.setMaxOutput(1.0);
        driveTrainSwerve.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);        

        driveTrainRrightSpin = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "RrightSpin", (Talon) driveTrainRrightSpin);
        
        driveTrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "LeftEncoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(1.0);
        driveTrainLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "RightEncoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(1.0);
        driveTrainRightEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
