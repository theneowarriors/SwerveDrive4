// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc613.SwerveDrive4.subsystems;

import org.usfirst.frc613.SwerveDrive4.RobotMap;
import org.usfirst.frc613.SwerveDrive4.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController left = RobotMap.driveTrainLeft;
    SpeedController right = RobotMap.driveTrainRight;
    RobotDrive drive = RobotMap.driveTrainDrive;
    SpeedController leftSpin = RobotMap.driveTrainLeftSpin;
    SpeedController fakeWheel = RobotMap.driveTrainFakeWheel;
    RobotDrive swerve = RobotMap.driveTrainSwerve;
    SpeedController rrightSpin = RobotMap.driveTrainRrightSpin;
    Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    Encoder rightEncoder = RobotMap.driveTrainRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DrivewithJoysticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void driveWithJoysticks(Joystick stick) {
    	drive.tankDrive(stick,stick);
    	swerve.tankDrive(stick.getX(),stick.getX());
    	SmartDashboard.putNumber("leftencodervalue", leftEncoder.getRaw());
    	SmartDashboard.putNumber("rightencodervalue", rightEncoder.getRaw());
    	
    	/*if((leftEncoder.getRaw())-(rightEncoder.getRaw())<=25||(rightEncoder.getRaw())-(leftEncoder.getRaw())>=25) {
    		rrightSpin.set(0);
    	}
    	else if((leftEncoder.getRaw())>(rightEncoder.getRaw())) {
    		rrightSpin.set(stick.getX()+.5);
    	}
    	else if((leftEncoder.getRaw())<(-rightEncoder.getRaw())) {
    		rrightSpin.set(stick.getX()-.5);
    	}*/
    }
    public void TurnLeft() {
    	if ((leftEncoder.getRaw())>550||(leftEncoder.getRaw())<450) {
    		if ((leftEncoder.getRaw())<500) {
    			leftSpin.set(.5);
    		}
    		else if ((leftEncoder.getRaw())>500) {
    			leftSpin.set(-.5);
    		}
    	}
    }
    public void TurnRight() {
    	if ((leftEncoder.getRaw())<-550||(leftEncoder.getRaw())>-450) {
    		if ((leftEncoder.getRaw())>-500) {
    			leftSpin.set(-.5);
    		}
    		else if ((leftEncoder.getRaw())<-500) {
    			leftSpin.set(.5);
    		}
    	}
    }
}

